"use client"

import useDeviceSize from "@/hooks/useDeviceSize"
import { Canvas, useFrame } from "@react-three/fiber"
import GUI from "lil-gui"
import { useRef, useState, useEffect } from "react"
import { PerspectiveCamera, useGLTF } from "@react-three/drei"
import { motion, useMotionValueEvent, useTransform } from "motion/react"
import { useCanvasContext } from "@/context/CanvasContext"

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Rouker (https://sketchfab.com/Rouker)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/bodybuilder-base-mesh-f9218d0b1a834c52acc93eb6a88934fe
Title: bodybuilder base mesh
*/

export function Bodybuilder(props) {
  const { nodes, materials } = useGLTF("/3d/bodybuilder_base_mesh4k.glb")
  const meshRef = useRef()

  materials.defaultMat.metalness = 0.95 // Full metallic effect
  materials.defaultMat.roughness = 0.44 // Slightly rough, adjust for shininess
  // materials.defaultMat.color = new THREE.Color(0x888888) // Grayish color, can be adjusted to suit
  materials.envMapIntensity = 1.5
  materials.castShadow = true
  materials.receiveShadow = true

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_2.geometry}
        material={materials.defaultMat}
        ref={meshRef}
      />
    </group>
  )
}

useGLTF.preload("/3d/bodybuilder_base_mesh4k.glb")

export function Environment() {
  const meshRef = useRef()
  const lightRef = useRef()
  const ambientLightRef = useRef()
  const [isMovingForward, setIsMovingForward] = useState(true)

  const [width] = useDeviceSize()
  const isMobile = width < 768

  useEffect(() => {
    lightRef.current.position.x = 8
  }, [])

  useFrame(({ clock }) => {
    if (lightRef.current) {
      isMovingForward
        ? (lightRef.current.position.x += 0.05)
        : (lightRef.current.position.x -= 0.05)

      lightRef.current.position.x >= 8
        ? setIsMovingForward(false)
        : lightRef.current.position.x <= -15 && setIsMovingForward(true)

      // console.log(lightRef.current.position.x)
    }
  })

  const [rotateZ, setRotateZ] = useState(-1.1)
  const [posX, setPosX] = useState(3.9) // Not mobile-supporting
  const { heroYProgress } = useCanvasContext()
  const rotateZMotionValue = useTransform(
    heroYProgress,
    [0, 0.65],
    [-1.1, -3.4]
  )
  const posXMotionValue = useTransform(heroYProgress, [0, 0.65], [3.9, 1.5])

  useMotionValueEvent(heroYProgress, "change", () => {
    setRotateZ(rotateZMotionValue.get())
    setPosX(posXMotionValue.get())
  })

  return (
    <>
      <PerspectiveCamera makeDefault position={[0, 3, 0]} />
      {/* Lightning */}
      <ambientLight intensity={0.22} ref={ambientLightRef} />
      {/* Main light */}
      <directionalLight
        position={[-10, 10, 5]}
        intensity={0.5}
        castShadow
        ref={lightRef}
      />
      <directionalLight
        position={[-10, 10, 5]}
        intensity={0.5}
        castShadow
        ref={lightRef}
      />
      {/* <directionalLight position={[-10, 10, 5]} intensity={0.5} castShadow /> */}
      <Bodybuilder
        position={[isMobile ? 0.5 : posX, isMobile ? -5.25 : -8.1, -6]}
        scale={isMobile ? 0.8 : 1}
        rotation={[-Math.PI / 2, 0, isMobile ? -0.5 : rotateZ]}
        ref={meshRef}
      />
    </>
  )
}
export default function HeroCanvas() {
  const { heroYProgress } = useCanvasContext()

  const y = useTransform(heroYProgress, [0, 1], [0, -220])
  const x = useTransform(heroYProgress, [0, 1], [1, 2])

  return (
    <motion.div
      id="canvas-container"
      className="absolute right-0 top-0 bottom-0 w-full h-screen"
      style={{ y, x }}
    >
      <Canvas>
        <Environment />
      </Canvas>
    </motion.div>
  )
}
